%YAML 1.1
---

# @@@@@@@@@@  @@@@@@@@ @@@@@@@@ @@@@@@@    
# @@! @@! @@! @@!      @@!      @@!  @@@   Quadrant Information Security
# @!! !!@ @!@ @!!!:!   @!!!:!   @!@!!@a    https://quadrantsec.com
# !!:     !!: !!:      !!:      !!: :!a    Copyright (C) 2018
#  :      :   : :: ::  : :: ::   :   : :

#  Meer configuration file [http://github.com/beave/meer]
#  Champ Clark III & The Quadrant Information Security Team: https://quadrantsec.com
#  Copyright (C) 2018 Quadrant Information Security., et al.

meer-core:

#############################################################################
# Core Meer Settings
#############################################################################

  core:

    hostname: "mysensor"  # Unique name for this sensor (no spaces)
    interface: "eth0"     # Can be anything.  Sagan "syslog", suricata "eth0".

    runas: "suricata"	  # User to "drop privileges" too. 
    #runas: "sagan"

    classification: "/etc/suricata/classification.config"
    #classification: "/usr/local/etc/sagan-rules/classification.config"

    meer_log: "/var/log/meer/meer.log"   # Meer log file

    # Meer can decode various types of data from within an "alert".  This 
    # section enabled/disabled various JSON decoders.  

    metadata: enabled
    flow: enabled
    http: enabled
    tls: enabled
    ssh: enabled
    smtp: enabled
    email: enabled
    json: enabled

    # If "dns" is enabled, Meer will do reverse DNS (PTR) lookups of an IP. 
    # The "dns_cache" is the amount of time Meer should "cache" a PTR record
    # for.  The DNS cache prevents Meer from doing repeated lookups of an 
    # already looked up PTR record.  This reduces overloading DNS servers.

    dns: enabled
    dns_cache: 900	# Time in seconds. 

    # "health" checks are a set of signatures that are triggered every so 
    # often to ensure a sensor is up and operational.  When these events
    # are triggered,  they are not stored into the database as normal alert
    # data.  For example,  with MySQL/MariaDB output enabled, they update the 
    # "sensor.health" table with the current epoch time.  Think of these
    # events like a "ping" for your sensor.  This can be useful for detecting
    # when Meer, Suricata or Sagan have "died" unexpectedly.
  
    health: enabled
    health_signatures: 20000001,20000002,20000003,20000004

    waldo_file: "/var/log/meer/meer.waldo"	# Where to store the last 
                                                # position in the 
                                                # "follow-eve" file. 

    lock_file: "/var/log/meer/meer.lck"		# To prevent dueling processes.

    follow_eve: "/var/log/suricata/alert.json"	# The Suricata/Sagan file to monitor
    #follow-eve: "/var/log/sagan/alert.json"	

#############################################################################
# Output Plugins 
#############################################################################

output-plugins:

  ###########################################################################
  # MySQL/MariaDB output - Stores data from Suricata or Sagan into a semi-
  # traditional "Barnyard2/Snort" like database. 
  ###########################################################################

  sql:

    enabled: yes
    driver: mysql        # "mysql" or "postgresql"
    debug: no
    server: 127.0.0.1
    port: 3306           # Change to 5432 for PostgreSQL 
    username: "XXXX"
    password: "XXXXXX"
    database: "snort_test"

    # Automatically reconnect to the database when disconnected.

    reconnect: enabled
    reconnect_time: 10 

    # Store decoded JSON data that is similar to Unified2 "extra" data to the
    # "extra" table.

    extra_data: enabled

    # Store extra decoded JSON metadata from Suricata or Sagan.  This requires
    # your database to have the metadata, flow, http, etc. tables.  If all are
    # disabled,  Meer will stored data in strictly a Barnyard2/Snort method. 
    # If you want to store this decoded information,  and you likely do,  make
    # sure you have the decoders enabled in the "core" section of this Meer 
    # configuration file! 

    metadata: enabled
    flow: enabled
    http: enabled
    tls: enabled
    ssh: enabled
    smtp: enabled
    email: enabled
    json: enabled

    # If you would like Meer to mimic the legacy "reference" tables from
    # Snort/Barnyard2, enable it here.  If your using more than one database
    # to store Suricata or Sagan data, you'll likely want to leave this 
    # disabled. The legacy reference system isn't very efficient and there's
    # better ways to keep track of this data.  This is also a memory hog and
    # performance killer.  See tools/reference_handler/reference_handler.pl to
    # build a centralized reference table.

    reference_system: disabled
    sid_file: "/etc/suricata/rules/sid-msg.map"	  # Created with "create-sidmap"
    reference: "/etc/suricata/reference.config"

    #sid_file: "/usr/local/etc/sagan-rules/sagan-sid-msg.map"
    #reference: "/usr/local/etc/sagan-rules/reference.config"

  ###########################################################################
  # The "pipe" output module - This allows Meer to send a copy of an event
  # to a named pipe (FIFO) in its raw,  JSON form.  This allows for 
  # third party tools, like Sagan, to do further analysis on the event. 
  ###########################################################################
  
  pipe:

    enabled: no
    pipe_location: /var/sagan/fifo/sagan.fifo
    pipe_size: 1048576                        # System must support F_GETPIPE_SZ/F_SETPIPE_SZ
    metadata: enabled

    # Below are the "event_types" from Suricata/Sagan. This tells Meer what to send
    # to the named pipe/FIFO. 

    alert: enabled
    files: enabled
    flow: enabled
    dns: enabled
    http: enabled
    tls: enabled
    ssh: enabled
    smtp: enabled

